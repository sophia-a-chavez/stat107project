---
title: "main"
format: html
editor: visual
---

## Leo Guzman - attempt 1

My plan is to find the average amount of shootings per year by race

```{r}
FatalShootingsStats <- read.csv("FatalPoliceShootings_US.csv")

print(class(FatalShootingsStats))

head(FatalShootingsStats)
```

```{r}
#Convert the `date` column to Date format so can extract the year
FatalShootingsStats$date <- as.Date(FatalShootingsStats$date, format = "%m/%d/%Y")

#Made new column for year as an int
FatalShootingsStats$year <- as.integer(format(FatalShootingsStats$date, "%Y"))


```

```{r}
#Analyze 2015 as a test run

data_filtered <- FatalShootingsStats[FatalShootingsStats$year == 2015, ]


#Grab the total amount of times certain races are in the data
asian_count <- nrow(data_filtered[data_filtered$race_name == 'Asian', ])
black_count <- nrow(data_filtered[data_filtered$race_name == 'Black', ])
white_count <- nrow(data_filtered[data_filtered$race_name == 'White', ])
hispanic_count <- nrow(data_filtered[data_filtered$race_name == 'Hispanic', ])
native_count <- nrow(data_filtered[data_filtered$race_name == 'Native American', ])
other_count <- nrow(data_filtered[data_filtered$race_name == 'Other', ])
unknown_count <- nrow(data_filtered[data_filtered$race_name == 'Unknown', ])

#Created a data.frame with counts so can plot them
race_counts <- data.frame(
  race = c("White", "Black", "Hispanic", "Asian", "Native", "Other", "Unknown"),
  count = c(white_count, black_count, hispanic_count, asian_count, native_count, other_count, unknown_count)
)

#Created a pie chart
pie(race_counts$count, 
    labels = race_counts$race, 
    main = "Proportion of Different Races in Fatal Shootings in 2015",
    col = rainbow(length(race_counts$count)))


```

```{r}
## Sophia's addition 
#creating subsets by year

FatalShootingsStats <- na.omit(FatalShootingsStats) # getting rid of rows with any NA values

# basic stats dependent on year
data_15 <- subset(FatalShootingsStats, FatalShootingsStats$year == 2015 )
data_16 <- subset(FatalShootingsStats, FatalShootingsStats$year == 2016 )
data_17 <- subset(FatalShootingsStats, FatalShootingsStats$year == 2017 )
data_18 <- subset(FatalShootingsStats, FatalShootingsStats$year == 2018 )
data_19 <- subset(FatalShootingsStats, FatalShootingsStats$year == 2019 )
data_20 <- subset(FatalShootingsStats, FatalShootingsStats$year == 2020 )
data_21 <- subset(FatalShootingsStats, FatalShootingsStats$year == 2021 )
data_22 <- subset(FatalShootingsStats, FatalShootingsStats$year == 2022 )

total <- c(nrow(data_15), nrow(data_16), nrow(data_17), nrow(data_18), nrow(data_19), nrow(data_20), nrow(data_21), nrow(data_22) )

average_age <- c(mean(data_15$age), mean(data_16$age), mean(data_17$age), mean(data_18$age), mean(data_19$age), mean(data_20$age), mean(data_21$age), mean(data_22$age))

bodycam_false <- c(sum(data_15$body_camera == "FALSE"), sum(data_16$body_camera == "FALSE"), sum(data_17$body_camera == "FALSE"), sum(data_18$body_camera == "FALSE"), sum(data_19$body_camera == "FALSE"), sum(data_20$body_camera == "FALSE"), sum(data_21$body_camera == "FALSE"), sum(data_22$body_camera == "FALSE"))

bodycam_true <- c(sum(data_15$body_camera == "TRUE"), sum(data_16$body_camera == "TRUE"), sum(data_17$body_camera == "TRUE"), sum(data_18$body_camera == "TRUE"), sum(data_19$body_camera == "TRUE"), sum(data_20$body_camera == "TRUE"), sum(data_21$body_camera == "TRUE"), sum(data_22$body_camera == "TRUE"))

bodycam_percent <- c((bodycam_true[1]/total[1]), (bodycam_true[2]/total[2]),(bodycam_true[3]/total[3]),(bodycam_true[4]/total[4]),(bodycam_true[5]/total[5]),(bodycam_true[6]/total[6]),(bodycam_true[7]/total[7]),(bodycam_true[8]/total[7]))

### adding percent of shootings with armed 
gun_armedp <- c((sum(data_15$armed == "gun") / total[1]), (sum(data_16$armed == "gun") / total[2]), (sum(data_17$armed == "gun") / total[3]), (sum(data_18$armed == "gun") / total[4]), (sum(data_19$armed == "gun") / total[5]), (sum(data_20$armed == "gun") / total[6]), (sum(data_21$armed == "gun") / total[7]), (sum(data_22$armed == "gun") / total[7]))

unarmed_armedp <- c((sum(data_15$armed == "unarmed") / total[1]), (sum(data_16$armed == "unarmed") / total[2]), (sum(data_17$armed == "unarmed") / total[3]), (sum(data_18$armed == "unarmed") / total[4]), (sum(data_19$armed == "unarmed") / total[5]), (sum(data_20$armed == "unarmed") / total[6]), (sum(data_21$armed == "unarmed") / total[7]), (sum(data_22$armed == "unarmed") / total[7]))

car_armedp <- c((sum(data_15$armed == "Vehicle") / total[1]), (sum(data_16$armed == "Vehicle") / total[2]), (sum(data_17$armed == "Vehicle") / total[3]), (sum(data_18$armed == "Vehicle") / total[4]), (sum(data_19$armed == "Vehicle") / total[5]), (sum(data_20$armed == "Vehicle") / total[6]), (sum(data_21$armed == "Vehicle") / total[7]), (sum(data_22$armed == "Vehicle") / total[7]))


mental_illness <- c(sum(data_15$signs_of_mental_illness == "TRUE")/total[1], sum(data_16$signs_of_mental_illness == "TRUE")/total[2], sum(data_17$signs_of_mental_illness == "TRUE")/total[3], sum(data_18$signs_of_mental_illness == "TRUE")/total[4], sum(data_19$signs_of_mental_illness == "TRUE")/total[5], sum(data_20$signs_of_mental_illness == "TRUE")/total[6], sum(data_21$signs_of_mental_illness == "TRUE")/total[7], sum(data_22$signs_of_mental_illness == "TRUE")/total[8])

year_stats <- data.frame(total, round(average_age, 1), bodycam_false, bodycam_true, bodycam_percent, gun_armedp, unarmed_armedp, car_armedp, mental_illness) 

names(year_stats) <- c("Total Fatal Shootings", "Average Age", "No Body Camera", "Yes Body Camera", "percent of officers with  body camera", "percent of victims armed with gun", "percent of victims unarmed", "percent of victims armed with vehicle", "percent of victims with mental illness")
rownames(year_stats) <- c("2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022")
year_stats






```

```{r}
#Bryan's Additions
# adding colunm for current president -> is not currently working,  


FatalShootingsStats$month <- as.integer(format(FatalShootingsStats$date, "%m"))
FatalShootingsStats$day <- as.integer(format(FatalShootingsStats$date, "%d"))

FatalShootingsStats$President <-ifelse(FatalShootingsStats$month >= 1 & FatalShootingsStats$day >=20 & FatalShootingsStats$year >=2021, FatalShootingsStats$President <-"Joseph R. Biden", FatalShootingsStats$President <-"Donald Trump")

FatalShootingsStats$President <-ifelse((FatalShootingsStats$month >= 1 & FatalShootingsStats$day >=20 & FatalShootingsStats$year <=2016), FatalShootingsStats$President <-"Barack Obama", FatalShootingsStats$President <-"Donald Trump")
data_18 <- subset(FatalShootingsStats, FatalShootingsStats$year >= 2015 )

head(data_18)

```

```{r}
# aggregate data by year and race_name
race_year_counts <- aggregate(FatalShootingsStats$race_name, 
                              by = list(Year = FatalShootingsStats$year, 
                                        Race = FatalShootingsStats$race_name), 
                      FUN = length)
colnames(race_year_counts)[3] <- "Count"

# create a matrix to store counts for each race across years
race_counts_matrix <- xtabs(Count ~ Race + Year, data = race_year_counts)

# set up colors for each race
colors <- c("lightblue", "lightgreen", "lightcoral", "lightpink", "wheat", "lavender", "gray")

# creating bar plot
barplot(race_counts_matrix, beside = TRUE, col = colors,
        main = "Fatal Shootings by Race and Year",
        xlab = "Year", ylab = "Number of Fatal Shootings", 
        legend.text = rownames(race_counts_matrix), 
        args.legend = list(x = "topright", inset = c(-0.05, 0)))

```

```{r}
# set up an empty plot with the correct axes limits
plot(NULL, xlim = range(race_year_counts$Year), 
     ylim = range(race_year_counts$Count), 
     xlab = "Year", ylab = "Number of Fatal Shootings", 
     main = "Fatal Shootings by Race Over the Years")

# define colors for each race
race_colors <- c("blue", "green", "red", "purple", "orange", "pink", "gray")

# get unique races
unique_races <- unique(race_year_counts$Race)

# loop through each race to plot its line on the graph
for (i in 1:length(unique_races)) {
  # Subset data for the current race
  race_data <- subset(race_year_counts, Race == unique_races[i])
  
  # plot the line for this race
  lines(race_data$Year, race_data$Count, type = "o", col = race_colors[i], pch = 16)
}

# add a legend
legend("topright", legend = unique_races, col = race_colors, pch = 16, lty = 1)
```

```{r}
# filtering data to include only unarmed incidents
unarmed_data <- subset(FatalShootingsStats, FatalShootingsStats$armed == "unarmed")

# count unarmed fatalities by race
unarmed_deaths_by_race <- aggregate(unarmed_data$armed, 
                                    by = list(Race = unarmed_data$race_name), 
                                    FUN = length)
colnames(unarmed_deaths_by_race)[2] <- "Unarmed_Deaths"

# count display
unarmed_deaths_by_race



```

```{r}
# count total fatalities by race
total_deaths_by_race <- aggregate(FatalShootingsStats$armed, 
                                  by = list(Race = FatalShootingsStats$race_name), 
                                  FUN = length)

# ensure all races are represented in unarmed deaths by race
all_races <- unique(FatalShootingsStats$race_name)
unarmed_deaths_by_race <- aggregate(unarmed_data$armed, 
                                    by = list(Race = unarmed_data$race_name), 
                                    FUN = length)
unarmed_deaths_by_race <- merge(data.frame(Race = all_races), unarmed_deaths_by_race, 
                                by = "Race", all.x = TRUE)
unarmed_deaths_by_race[is.na(unarmed_deaths_by_race)] <- 0  # Replace NA with 0

# merge total deaths and unarmed deaths
race_unarmed_comparison <- merge(unarmed_deaths_by_race, total_deaths_by_race, 
                                 by = "Race", 
                                 suffixes = c("_Unarmed", "_Total"))

# calculate percentage of unarmed fatalities for each race
race_unarmed_comparison$Unarmed_Death_Percentage <- 
  (race_unarmed_comparison$x_Unarmed / race_unarmed_comparison$x_Total) * 100

# rename columns for clarity
colnames(race_unarmed_comparison) <- c("Race", "Unarmed_Deaths", "Total_Deaths", "Unarmed_Death_Percentage")

# display the updated data frame
race_unarmed_comparison

# adjust margins to give more space to labels
par(mar = c(5, 10, 4, 2) + 0.1) # Increase left margin for y-axis labels

# create a horizontal bar plot
barplot(race_unarmed_comparison$Unarmed_Death_Percentage,
names.arg = race_unarmed_comparison$Race,
main = "Percentage of Unarmed Fatalities by Race",
xlab = "Percentage of Unarmed Fatalities",
col = "lightcoral",
horiz = TRUE,       # Horizontal bars
las = 1,            # Ensure labels are horizontal on y-axis
cex.names = 0.9)    # Adjust label size if needed

# reset margins after plotting (optional if running multiple plots in sequence)
par(mar = c(5, 4, 4, 2) + 0.1)

```

```{r}
##adding map visual, needs work
library(maps)

asian_count <- subset(FatalShootingsStats, FatalShootingsStats$race_name == 'Asian' )
black_count <- subset(FatalShootingsStats, FatalShootingsStats$race_name == 'Black')
white_count <- subset(FatalShootingsStats, FatalShootingsStats$race_name == 'White')
hispanic_count <- subset(FatalShootingsStats, FatalShootingsStats$race_name == 'Hispanic')
native_count <-subset(FatalShootingsStats, FatalShootingsStats$race_name =='Native American')
other_count <- subset(FatalShootingsStats, FatalShootingsStats$race_name == 'Other')
unknown_count <- subset(FatalShootingsStats, FatalShootingsStats$race_name == 'Unknown')

maps::map("state")
points(asian_count$longitude, asian_count$latitude,
  pch = 4, col = "deeppink", cex = 1)

points(black_count$longitude, black_count$latitude,
  pch = 4, col = "yellow", cex = 1)

points(white_count$longitude, white_count$latitude,
  pch = 4, col = "red", cex = 1)

points(hispanic_count$longitude, hispanic_count$latitude,
  pch = 4, col = "purple", cex = 1)

points(native_count$longitude, native_count$latitude,
  pch = 4, col = "blue", cex = 1)

points(other_count$longitude, other_count$latitude,
  pch = 4, col = "black", cex = 1)

points(unknown_count$longitude, unknown_count$latitude,
  pch = 4, col = "orange", cex = 1)

```

```{r}
library(dplyr)
library(ggplot2)

FatalShootingsStats$age <- as.numeric(as.character(FatalShootingsStats$age))

# Create AgeRange dynamically
FatalShootingsStats$AgeRange <- cut(
  FatalShootingsStats$age,
  breaks = c(0, 18, 35, Inf), # Define age range intervals
  labels = c("0-18", "19-35", "36+"),
  right = FALSE # Makes intervals inclusive on the left
)

# Summarize data to count individuals by Race and AgeRange
summary_data <- FatalShootingsStats %>%
  group_by(race, AgeRange) %>%
  summarise(Count = n(), .groups = "drop")

# Create the bar plot
ggplot(FatalShootingsStats, aes(x = race_name, y = age, fill = AgeRange)) +
  geom_bar(stat = "identity", position = "dodge") + # Position bars side by side
  labs(
    title = "Bar Plot of Races by Age Range",
    x = "Race",
    y = "Count"
  ) +
  scale_fill_brewer(palette = "Set2") + # Optional color palette
  theme_minimal() # Clean theme

```

On May 25, 2020, George Floyd, a Black man living in Minneapolis, Minnesota was brutally killed by a Minneapolis police officer. This sparked a new peak in the Black Lives Matter (BLM) movement, where there was a new wave of both peaceful protests and riots. The peak of the BLM riots, vandalism, arson and looting occurred from May 26th to June 8th in 2020. During these 2 weeks, were fatal shootings higher than normal?

```{r}
# Convert the 'Date' column to Date type if it isn't already
FatalShootingsStats$date <- as.Date(FatalShootingsStats$date, format = "%Y-%m-%d")  # Adjust format if needed

# Specify the two specific dates you want to check
date1 <- as.Date("2020-05-26")  # Example date 1
date2 <- as.Date("2020-06-08")  # Example date 2

# Filter data for those two dates and count the total number of shootings
shootings_period <- FatalShootingsStats %>%
  filter(date >= date1 & date <= date2)
 
# Number of unique days in the time period
unique_days_period <- length(seq.Date(date1, date2, by = "day"))

# Total number of shootings in the time period
total_shootings_period <- nrow(shootings_period)

# Average shootings per day for the time period (including all days in the range)
avg_shootings_per_day_period <- total_shootings_period / unique_days_period

# 2. Calculate the average number of shootings per day for the entire dataset
# Find the first and last dates in the dataset
first_date <- min(FatalShootingsStats$date)
last_date <- max(FatalShootingsStats$date)

# Number of unique days in the entire dataset (including all days between the first and last date)
unique_days_total <- length(seq.Date(first_date, last_date, by = "day"))

# Total number of shootings in the entire dataset
total_shootings_total <- nrow(FatalShootingsStats)

# Average shootings per day for the entire dataset (including all days in the range)
avg_shootings_per_day_total <- total_shootings_total / unique_days_total

# Print the results
cat("Average shootings per day for the period from May 26, 2020 to June 8, 2020 :", avg_shootings_per_day_period, "\n")
cat("Average shootings per day for the entire dataset:", avg_shootings_per_day_total, "\n")

```

```{r}
# Create a vector with the two averages
average_shootings <- c(avg_shootings_per_day_period, avg_shootings_per_day_total)

# Create a bar plot
barplot(average_shootings, 
        names.arg = c("peak BLM riots", "Entire Dataset"), 
        main = "Comparison of Average Shootings per Day", 
        ylab = "Average Shootings per Day", 
        col = c("lightblue", "lightgreen"), 
        border = "black")

```

```{r}
library(maps)
state_to_highlight <- "Minnesota"

# Basic Map Plot
map("state", col = "lightgray", fill = TRUE, bg = "white", lwd = 0.2)  # Draw USA map
map("state", region = state_to_highlight, col = "lightblue", fill = TRUE, add = TRUE)

# Overlay points for Los Angeles and Miami
# Coordinates for Los Angeles
points(-118.2437, 34.0522, col = "blue", pch = 19, cex = 2)  # Los Angeles

# Optionally, add text labels for the cities
text(-118.2437, 34.0522, "Los Angeles", pos = 3, col = "blue", cex = 1)

# Overlay points (longitude, latitude) on the map
points(shootings_period$longitude, shootings_period$latitude, col = "red", pch = 20, cex = 1.5)

```

As we can see, the average number of fatal shootings a day were slightly greater during the peak of the riots, vandalism, arson and looting after George Floyd's death. Surprisingly, none of the deaths occurred in Minneapolis, which was a hot spot for said BLM riots, but Los Angeles, which was also a hot spot, is shown to have a few deaths in it's area. So, while the average number of fatal shooting during the peak of the BLM riots period doesn't seem that much larger than the average number of fatal shootings in the entire data set, it doesn't tell the entire picture. If the average number of fatal shootings during the seven and a half years the data set encapsulates was the same as the average during the peak of the BLM riots, there would be an increase of 1,769 fatal shootings or 236 fatal shootings a year.

**Event 2: Covid-19 Lockdowns**

On January 5th, 2020, the CDC’s National Center for Immunization and Respetoriy Diseases investigated the outbreak of a pneumonia-adjacent illness that was not responding to treatment, and by March 15th all but 7 U.S states shut down businesses, universities, and other large gatherings while urging people to stay in their homes to slow the spread. By analizing our original dataset with respect to enforced quarantine periods, we can identify possible correlations between social movement and fatal shootings.

```{r}
library(maps)

library(tidyverse)
library(dplyr)
library(ggplot2)

# Convert the 'Date' column to Date type if it isn't already
FatalShootingsStats$date <- as.Date(FatalShootingsStats$date, format = "%Y-%m-%d")  

#filtering data by covid lockdown timeline
during_date1 <- as.Date("2020-03-15")  # main US lockdown start
during_date2 <- as.Date("2021-05-01")  # need to find sorce for this date
during_covid <- FatalShootingsStats %>%
  filter(date >= during_date1 & date <= during_date2)

before_date1 <- min(FatalShootingsStats$date)  
before_date2 <- as.Date("2020-03-14")
before_covid <- FatalShootingsStats %>%
  filter(date >= before_date1 & date <= before_date2)

after_date1 <- as.Date("2021-05-01")  
after_date2 <- max(FatalShootingsStats$date)
after_covid <- FatalShootingsStats %>%
  filter(date >= after_date1 & date <= after_date2)

#total number of shootings per time period
total_shootings_during <- nrow(during_covid)
total_shootings_before <- nrow(before_covid)
total_shootings_after <- nrow(after_covid)

#total number of days in time period
unique_days_during <- length(seq.Date(during_date1, during_date2, by = "day"))
unique_days_before <- length(seq.Date(before_date1, before_date2, by = "day"))
unique_days_after <- length(seq.Date(after_date1, after_date2, by = "day"))

#shootings per day
avg_shootings_during <- total_shootings_during / unique_days_during
avg_shootings_before <- total_shootings_before / unique_days_before
avg_shootings_after <- total_shootings_after / unique_days_after

cat("Before the lockdowns: Total shootings ",total_shootings_before," Average shootings per day", avg_shootings_before, "\n")
cat("During the lockdowns: Total shootings ",total_shootings_during," Average shootings per day", avg_shootings_during, "\n")
cat("After the lockdowns: Total shootings ",total_shootings_after," Average shootings per day", avg_shootings_after, "\n")
#cat("Number of days in dataset before lockdowns ",unique_days_before,"\n", "Number of days in dataset during lockdowns ",unique_days_during,"\n","Number of days in dataset after lockdowns ",unique_days_after,"\n")

```

```{r}
library(maps)
state_to_highlight <- c("Arkansas", "Iowa", "Nebraska", "North Dakota", "South Dakota", "Utah", "Wyomming") #sates that never enforced lockdown
# Basic Map Plot

maps::map("state", col = "lightgray", fill = TRUE, bg = "white", lwd = 0.2)  
maps::map("state", region = state_to_highlight, col = "lightblue", fill = TRUE, add = TRUE)
points(before_covid$longitude, before_covid$latitude, col = "black", pch = 20, cex = 1.0)
legend("bottomright", legend = "Fatal Shooting", pch = 20, col = "black", cex = 0.5)
legend("bottomleft", legend = "No Manditory Lockdown", fill= "lightblue", col = "lightblue", cex = 1)
title(main= "Before Covid-19 Lockdown")

maps::map("state", col = "lightgray", fill = TRUE, bg = "white", lwd = 0.2) 
maps::map("state", region = state_to_highlight, col = "lightblue", fill = TRUE, add = TRUE)
points(during_covid$longitude, during_covid$latitude, col = "black", pch = 20, cex = 1.0)
legend("bottomright", legend = "Fatal Shooting", pch = 20, col = "black", cex = 0.5)
legend("bottomleft", legend = "No Manditory Lockdown", fill= "lightblue", col = "lightblue", cex = 1)
title(main= "During Covid-19 Lockdown")

maps::map("state", col = "lightgray", fill = TRUE, bg = "white", lwd = 0.2)  
maps::map("state", region = state_to_highlight, col = "lightblue", fill = TRUE, add = TRUE)
points(after_covid$longitude, after_covid$latitude, col = "black", pch = 20, cex = 1.0)
legend("bottomright", legend = "Fatal Shooting", pch = 20, col = "black", cex = 0.7)
legend("bottomleft", legend = "No Manditory Lockdown", fill= "lightblue", col = "lightblue", cex = 1)
title( "After Covid-19 Lockdown")

```

```{r}
#"Arkansas", "Iowa", "Nebraska", "North Dakota", "South Dakota", "Utah", "Wyomming"
## Arkansas data 
before_ar <- before_covid %>%
  filter(before_covid$state == "AR" | before_covid$state == "IA" | before_covid$state == "NE" | before_covid$state == "ND" | before_covid$state == "SD" | before_covid$state == "UT" | before_covid$state == "WY" )
during_ar <- before_covid %>%
  filter(before_covid$state == "AR" | before_covid$state == "IA" | before_covid$state == "NE" | before_covid$state == "ND" | before_covid$state == "SD" | before_covid$state == "UT" | before_covid$state == "WY" )
after_ar <- before_covid %>%
  filter(before_covid$state == "AR" | before_covid$state == "IA" | before_covid$state == "NE" | before_covid$state == "ND" | before_covid$state == "SD" | before_covid$state == "UT" | before_covid$state == "WY" )


#total number of shootings per time period
total_shootings_Bar <- nrow(during_ar)
total_shootings_Dar <- nrow(before_ar)
total_shootings_Aar <- nrow(after_ar)


#shootings per day
avg_shootings_during <- total_shootings_Dar / unique_days_during
avg_shootings_before <- total_shootings_Bar / unique_days_before
avg_shootings_after <- total_shootings_Aar / unique_days_after

cat("Shootings per day in states with no enforced lockdowns",avg_shootings_during,"\n",  "Shootings per day in states with no enforced lockdowns",avg_shootings_before,"\n", "Shootings per day in  states with no enforced lockdowns",avg_shootings_after)

```
